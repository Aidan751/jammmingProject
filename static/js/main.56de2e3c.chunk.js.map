{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","event","this","setState","target","value","onSearch","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","saved","push","filter","currentTrack","trackURIs","forEach","playlistTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56de2e3c.chunk.js","sourcesContent":["let clientId = '2213c3adaa864019af0d2320b006a14f';\r\nlet redirectUri = 'http://scandalous-vacation.surge.sh';\r\n\r\n\r\nlet accessToken;\r\n\r\nlet Spotify = {\r\n  getAccessToken(){\r\n    if(accessToken){\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n          window.location = accessUrl;\r\n        }\r\n      },\r\n\r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      })\r\n        .then(response => response.json())\r\n        .then(jsonResponse => {\r\n          if (!jsonResponse.tracks) {\r\n            return [];\r\n          }\r\n          return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n          }));\r\n        });\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n      if (name && trackUris) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {\r\n          Authorization: `Bearer ${accessToken}`\r\n        };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers })\r\n          .then(response => response.json())\r\n          .then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n              headers: headers,\r\n              method: 'POST',\r\n              body: JSON.stringify({ name: name })\r\n            })\r\n              .then(response => response.json())\r\n              .then(jsonResponse => {\r\n                //Store playlist ID\r\n                const playlistId = jsonResponse.id;\r\n\r\n                return fetch(\r\n                  `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n                  {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                  }\r\n                );\r\n              });\r\n          });\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\nexport default Spotify;\r\n\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {term : ''};\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n \r\n\r\n    handleTermChange(event){\r\n     \r\n        this.setState({term: event.target.value})\r\n    }\r\n    search(){\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"SearchBar\">\r\n  <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n  <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n        return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n  <div className=\"Track-information\">\r\n    <h3>{this.props.track.name}</h3>\r\n    <p> \r\n    {this.props.track.artist} | {this.props.track.album}</p>\r\n  </div>\r\n  {this.renderAction()}\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"TrackList\">\r\n    {this.props.tracks.map(track => {\r\n        return <Track track={track}\r\n            key={track.id}\r\n            onAdd={this.props.onAdd}\r\n            onRemove={this.props.onRemove}\r\n            isRemoval={this.props.isRemoval}\r\n        />\r\n    })}\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component{\r\n  render(){\r\n    return (\r\n        <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event){\r\n      \r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Playlist\">\r\n  <input value={this.props.playlistName} onChange={this.handleNameChange}/>\r\n  <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\r\n  <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import './App.css';\nimport React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify.js'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n  \n      searchResults: [],\n      playlistName: 'Name a playlist',\n      playlistTracks: [],\n    \n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    // Our array of playlist tracks that we can loop through\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(saved=> saved.id === tracks.id)){\n      return;\n    }\n    tracks.push(track);\n\n    // set to our updated array of objects\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n  \n    tracks = tracks.filter(currentTrack => track.id !== currentTrack.id);\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist(){\n    let trackURIs = [];\n    this.state.playlistTracks.forEach(playlistTrack => {\n      trackURIs.push(playlistTrack.uri);\n    });\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    this.setState({playlistTracks:[], playlistName: 'New Playlist', searchResults:[]});\n  }\n\n  search(term){\n    Spotify.search(term).then(tracks => {\n      this.setState({searchResults: tracks});\n    });\n  }\n\n  \n  render(){\n    return (\n      <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch={this.search}/>\n    <div className=\"App-playlist\">\n      <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n      <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n    </div>\n  </div>\n</div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}